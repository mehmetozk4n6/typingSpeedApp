import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import axios from 'axios';
import { RootState, AppThunk } from './store';
// import { fetchCount } from '../features/counter/counterAPI';

export interface TypingState {
  isStart: boolean;
  status: 'idle' | 'loading' | 'failed' | 'succeed';
  timer:number;
  text : string;
  error:string|undefined;
}

const initialState: TypingState = {
  isStart: false,
  status: 'idle',
  timer:60,
  text :"",
  error:"",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const getText = createAsyncThunk(
  'typing/getText',
  async() => {
    // const options = {
    //   method: 'GET',
    //   url: 'https://baconator-bacon-ipsum.p.rapidapi.com/',
    //   params: {type: 'all-meat'},
    //   headers: {
    //     'X-RapidAPI-Key': 'SIGN-UP-FOR-KEY',
    //     'X-RapidAPI-Host': 'baconator-bacon-ipsum.p.rapidapi.com'
    //   }
    // };
    const res = axios.get(`https://baconipsum.com/api/?type=all-meat&paras=3`).then(response => response.data);
    return res;
  }
)

export const TypingSlice = createSlice({
  name: 'typing',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(getText.pending,(state)=> {
          state.status = 'loading';
        })
        .addCase(getText.fulfilled,(state,action)=> {
          state.status = "succeed";
          state.text = action.payload;
        })
        .addCase(getText.rejected,(state,action)=> {
          state.status = 'failed';
          state.error = action.error.message;
        })
      // .addCase(incrementAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(incrementAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.value += action.payload;
      // })
      // .addCase(incrementAsync.rejected, (state) => {
      //   state.status = 'failed';
      // });
  },
});

export const {  } = TypingSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectText = (state: RootState) => state.typing.text;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default TypingSlice.reducer;
